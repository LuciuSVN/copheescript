#!/usr/bin/env ruby

# require 'open3'

GLOBAL_COFFEE = `which coffee`
TEST_COPHEE = 'bin/coffee'

def normalized s
  " #{ s } ".gsub /\s+/, ' '
end

def compare msg, input, expected_output
  # test_output = system TEST_COPHEE, '-p', '-b',
  # stdin, stdout, stderr = Open3.popen3 TEST_COPHEE, '-b', '-p', '-s'
  # stdin.puts input
  # test_output = stdout.gets
  tempfile_name = './tmp_input'
  File.open( tempfile_name, 'w' ) {|file| file.write( input )}
  test_output = `#{ TEST_COPHEE } -b -p -s < #{ tempfile_name }`
  unless normalized( test_output ) == normalized( expected_output )
    raise [msg, "Expected: #{ expected_output }", "Actual: #{ test_output }"].join "\n"
  end
  print '.'
end

compare "destructured param",
  '''
  ([a, b]) ->
  ''',
  """
  (function($arg) {
    $a = $arg[0];
    $b = $arg[1];
  });
  """
compare "class const",
  '''
  class A
    B: 1
  ''',
  """
  class A {
    const B = 1;
  }
  """
compare "preserve ref w/ splatted args",
  '''
  ( &$a, $b... ) ->
  ''',
  """
  (function(&$a) {
    $__args = func_get_args();
    $b = array_slice($__args, 1);
  });
  """
compare "{ .col }",
  '''
  { .col }
  ''',
  """
  ([ '.col' => $col ]);
  """
compare "{ .@col }",
  '''
  { .@col }
  ''',
  """
  ([ '.col' => $this->col ]);
  """
compare "{ .@col } mixed",
  # '''
  # { a: 1
  #   .@col }
  # ''',
  '''
  { .col, .col2 }
  { a: 1,
    .@col,
    .col2 }
  ''',
  """
  ([ '.col' => $col,
     '.col2' => $col2 ]);
  ([ 'a' => 1,
     '.col' => $this->col,
     '.col2' => $col2 ]);
  """

compare "splatted arg",
  '''
  A::b $a...
  f $b, $c...
  $g.h $b, $c...
  ''',
  """
  call_user_func_array('A::b', $a);
  call_user_func_array('f', array_merge([$b], $c));
  call_user_func_array([$g, \"h\"], array_merge([$b], $c));
  """

compare "foreach &ref",
  '''
  for &$a of $b
    $a["c"] = 3
  ''',
  '''
  foreach ($b as &$a) {
    $a["c"] = 3;
  }
  '''

compare "foreach &ref w/ key",
  '''
  for $k, &$a of $b
    $a["c"] = 3
  ''',
  '''
  foreach ($b as $k => &$a) {
    $a["c"] = 3;
  }
  '''

compare "interpolated key",
  '''
  "#{ $a }.b": 1
  ''',
  '''
  ([ $a . ".b" => 1 ]);
  '''

# compare "prop/access obj key",
#   """
#   a:      1
#   $b.c:    2
#   $d['e']: 3
#   """,
#   """
#   ['a' => 1,
#    $b->c => 2,
#    $d['e'] => 3]
#   """

compare "abstract method",
  '''
  abstract class A
    abstract x: ->
    abstract @y: ->
  ''',
  """
  abstract class A {
    abstract function x() ;
    abstract static function y() ;
  }
  """

compare "non-initial abstract method",
  '''
  class A
    x: ->
    abstract y: ->
  ''',
  """
  class A {
    function x() {}
    abstract function y() ;
  }
  """

compare "abstract class",
  '''
  abstract class A
    use B
  ''',
  """
  abstract class A {
    use B;
  }
  """

compare "access self prop",
  """
  self::$a['b']
  """,
  """
  self::$a['b'];
  """

compare "existy op on prop",
  """
  $x = self::$a['b'] ? 3
  """,
  """
  $x = isset( self::$a['b'] ) ? self::$a['b'] : (3);
  """

compare "splatted param",
  '''
  ( $a, $b... ) ->
  ''',
  """
  (function() {
    $__args = func_get_args();
    $a = $__args[0];
    $b = array_slice($__args, 1);
  });
  """

compare "octal escape",
  '''
  "abc\033def"
  ''',
  '''
  "abc\033def";
  '''

compare "don't return unset",
  """
  ( $x ) -> unset $x['a'];
  """,
  """
  (function($x) {
    unset($x['a']);
  });
  """

compare "(unset) vs unset",
  '''
  (unset) $x
  unset $x
  ''',
  """
  (unset)($x);
  unset($x);
  """

# compare "type cast w/ expr",
#   '''
#   (int) $x + $y
#   ''',
#   """
#   (int)($x) + $y;
#   """

compare "type cast w/ paren expr",
  '''
  (int) ($x + $y)
  (int)($x) + $y
  ''',
  """
  (int)($x + $y);
  (int)($x) + $y;
  """

compare "type cast",
  '''
  (int) $x
  ''',
  """
  (int)($x);
  """

compare "static::$prop",
  '''
  static::$prop
  ''',
  """
  static::$prop;
  """

compare "don't use $GLOBALS",
  """
  ->
    $GLOBALS['a'] + $b
  """,
  """
  (function() use (&$b) {
    return $GLOBALS['a'] + $b;
  });
  """

compare "else if expression",
  '''
  $x =
    if $a
      1
    else if $b
      2
    else 3
  ''',
  """
  $x = $a ? 1 : ($b ? 2 : (3));
  """

compare "assign to splatted array",
  '''
  [a, b..., c] = $v;
  ''',
  """
  $a = $v[0]; $b = array_slice($v, 1, -1); $i = count($v) - 1; $c = $v[$i++];
  """

compare "splatted array",
  '''
  [@a, ( $b ?: [])...]
  ''',
  """
  array_merge([$this->a], $b ?: []);
  """

compare "phpdoc block comment",
  '''
  ###
  # Great test
  #
  # @dataProvider provider_test
  ###
  ''',
  """
  /**
   * Great test
   *
   * @dataProvider provider_test
   */
  """

compare "triple regex",
  '''
  ///
    a*
    b
  ///
  ''',
  """
  '/a*b/';
  """

compare "existy prop w/ chain",
  '''
  $c = $a?.b.c
  ''',
  '''
  $c = isset( $a->b ) ? $a->b->c : null;
  '''

compare "trait",
  '''
  trait A
    x: ->
      3
  ''',
  """
  trait A {
    function x() {
      return 3;
    }
  }
  """

compare "1 < $a < 3",
  '''
  1 < $a.b < 3
  ''',
  """
  (1 < ($ref = $a->b) && $ref < 3);
  """

compare "use trait",
  '''
  class A
    use B
  ''',
  """
  class A {
    use B;
  }
  """

compare "backticked methods",
  '''
  class A
    `function x() {}`
  ''',
  """
  class A {
    function x() {}
  }
  """

compare "mixed obj w/ interpolated string",
  '''
  { a, "abc#{ $b }" }
  ''',
  """
  ([ 'a' => $a, \"abc\" . $b ]);
  """
compare "namespaced name",
  '''
  $x = do Parse\ParseInstallation::query
  ''',
  '''
  $x = Parse\ParseInstallation::query();
  '''
compare "deref list",
  '''
  [ a ] = $obj
  ''',
  """
  $a = $obj[0];
  """
compare "deref list multiple",
  '''
  [ a, b ] = $obj
  ''',
  """
  $a = $obj[0]; $b = $obj[1];
  """

compare "triple quote newline",
  '''
  """
    abc
    def"""
  ''',
  '''
  "abc
def";
  '''
compare "use shouldn't pick up other method params",
  '''
  class A
    a: ( $start ) ->
    b: ->
      ->
        $start = date_create $new_time
  ''',
  """
  class A {
    function a($start) {}

    function b() {
      return function() use (&$new_time) {
        return $start = date_create($new_time);
      };
    }
  }
  """

# compare "mixed obj w/ num, expression",
#   '''
#   { a: 1, "abc", $a, 1, ($b + 5), c }
#   ''',
#   """
#   ([ 'a' => 1, \"abc\", $a, 1, $b + 5, 'c' => $c ]);
#   """

compare "mixed obj w/ num",
  '''
  { a: 1, "abc", $a, 1, c }
  ''',
  """
  ([ 'a' => 1, \"abc\", $a, 1, 'c' => $c ]);
  """

compare "@@fwrite",
  '''
  @@fwrite $socket, "abc"
  ''',
  '''
  @fwrite($socket, "abc");
  '''

compare "?: op",
  '''
  $a ?: 3
  ''',
  '''
  $a ?: 3;
  '''

compare "mixed obj",
  '''
  { a: 1, "abc" }
  ''',
  """
  ([ 'a' => 1, \"abc\" ]);
  """

compare "var object key",
  '''
  $x: 3
  ''',
  '''
  ([ $x => 3 ]);
  '''

compare "deref list",
  '''
  [a, b] = $c;
  ''',
  """
  $a = $c[0]; $b = $c[1];
  """

compare "deref obj just @prop",
  '''
  { @a } = $obj
  ''',
  """
  $this->a = $obj['a'];
  """
compare "deref obj incl @prop",
  '''
  { @a, b } = $obj
  ''',
  """
  $this->a = $obj['a']; $b = $obj['b'];
  """

compare "auto-return for",
  '''
  ( $a ) ->
    for $x of $a
      $x[1]
  ''',
  """
  (function($a) {
    $results = [];
    foreach ($a as $x) {
      $results[] = $x[1];
    }
    return $results;
    });
  """

compare "(&$a)",
  '''
  ( &$a ) ->
  ''',
  """
  (function(&$a) {});
  """
compare "(@a=3)",
  '''
  ( @$a=3 ) ->
  ''',
  """
  (function($a=3) { $this->a = $a; });
  """
compare "(@a)",
  '''
  ( @$a, $b ) ->
  ''',
  """
  (function($a, $b) { $this->a = $a; });
  """

compare "{@a}",
  '''
  { @a }
  ''',
  """
  ([ 'a' => $this->a ]);
  """

compare "{b, @a}",
  '''
  { b, @a }
  ''',
  """
  ([ 'b' => $b, 'a' => $this->a ]);
  """

compare "deref obj from expr",
  '''
  { a, b } = Arr::wrap $obj
  ''',
  """
  $ref = Arr::wrap($obj); $a = $ref['a']; $b = $ref['b'];
  """

compare "deref obj single prop",
  '''
  { a } = $obj
  ''',
  """
  $a = $obj['a'];
  """

compare "deref obj",
  '''
  { a, b } = $obj
  ''',
  """
  $a = $obj['a']; $b = $obj['b'];
  """

compare "global decl",
  '''
  global $ZDB
  ''',
  '''
  global $ZDB;
  '''

compare "{ a }",
  '''
  { a }
  ''',
  """
  ([ 'a' => $a ]);
  """

compare "?= param w/ default",
  '''
  ( $x=5 ) -> $x ?= 3
  ''',
  '''
  (function($x=5) { return isset( $x ) ? $x : ($x = 3); });
  '''
compare "assigned switch",
  '''
  $x =
    switch $y
      when 5
        3
  ''',
  '''
  $x = call_user_func((function() use (&$y) {
    switch ($y) {
      case 5:
        return 3;
    }
  }));
  '''
compare "function typed arg",
  '''
  ( Wrap $x ) ->  $x + 5
  ''',
  '''
  (function(Wrap $x) { return $x + 5; });
  '''

compare "string interpolation becomes dot",
  '''
  "#{ a }bc"
  ''',
  '''
  a . "bc";
  '''

compare "arithmetic +",
  '''
  1 + 2
  ''',
  '''
  1 + 2;
  '''

compare "array +",
  '''
  $a + a: 3
  ''',
  """
  $a + [ 'a' => 3 ];
  """

compare "bare @ becomes $this",
  '''
  @
  ''',
  '''
  $this;
  '''

compare "@prop becomes $this->prop",
  '''
  @prop
  ''',
  '''
  $this->prop;
  '''

compare "$obj.prop becomes $obj->prop",
  '''
  $obj.prop
  ''',
  '''
  $obj->prop;
  '''

compare "function no args",
  '''
  -> 5
  ''',
  '''
  (function() { return 5; });
  '''

compare "function args including default",
  '''
  ( $a, $b=2 ) -> $a - $b
  ''',
  '''
  (function($a, $b=2) { return $a - $b; });
  '''

compare "automatic use",
  '''
  -> $a
  ''',
  '''
  (function() use (&$a) { return $a; });
  '''

compare "obj literal adds quotes to keys",
  "
  a: 1
  b: 2
  'c': 3
  ",
  "
  ([ 'a' => 1, 'b' => 2, 'c' => 3 ]);
  "

compare "class non-static method",
  '''
  class A
    b: ->
  ''',
  '''
  class A {
    function b() {}
  }
  '''

compare "class static method",
  '''
  class A
    @b: ->
  ''',
  '''
  class A {
    static function b() {}
  }
  '''

compare "pseudo-typed param",
  '''
  ( Wrap_$b ) -> $b
  ''',
  '''
  (function(Wrap $b) { return $b; });
  '''

compare "reference class static prop",
  '''
  Zdb::OneToOne
  ''',
  '''
  Zdb::OneToOne;
  '''

compare "call static method",
  '''
  Dt::first_day_of_month $dt
  ''',
  '''
  Dt::first_day_of_month($dt);
  '''

compare "class extends",
  '''
  class A extends B
  ''',
  '''
  class A extends B {
  }
  '''

compare "existence",
  '''
  $a?
  ''',
  '''
  isset( $a );
  '''

compare "class static, non-static vars",
  '''
  class A
    @$b = 1
    $c = 2
  ''',
  '''
  class A {
    public static $b = 1;

    public $c = 2;
  }
  '''

compare "try with pseudo-typed catch",
  '''
  try
    $a = 1
  catch Exception_$e
    echo $e
  ''',
  '''
  try {
    $a = 1;
  } catch (Exception $e) {
    echo($e);
  }
  '''

compare "catch typed arg",
  '''
  try
    $a = 1
  catch Exception $e
    echo $e
  ''',
  '''
  try {
    $a = 1;
  } catch (Exception $e) {
    echo($e);
  }
  '''
compare "simple foreach loop",
  '''
  for $a of $b
    echo $a
  ''',
  '''
    foreach ($b as $a) {
      echo($a);
    }
  '''

compare "foreach loop including key",
  '''
  for $k, $v of $b
    echo $k
  ''',
  '''
    foreach ($b as $k => $v) {
      echo($k);
    }
  '''

compare "existy or",
  '''
  $b = $a ? 3
  ''',
  '''
  $b = isset( $a ) ? $a : (3);
  '''

compare "existy prop",
  '''
  $c = $a?.b
  ''',
  '''
  $c = isset( $a->b ) ? $a->b : null;
  '''

compare "existy access",
  '''
  $c = $a?["b"]
  ''',
  '''
  $c = isset( $a["b"] ) ? $a["b"] : null;
  '''

compare "existy function call",
  '''
  $c = $a?( $b )
  ''',
  '''
  $c = isset( $a ) && is_callable( $a ) ? $a($b) : null;
  '''

compare "existy method call",
  '''
  $c = $a.has?( $b )
  ''',
  '''
  $c = isset( $a ) && is_callable( [$a, "has"] ) ? $a->has($b) : null;
  '''

compare ".= op",
  '''
  $a .= "abc"
  ''',
  '''
  $a .= "abc";
  '''

compare "class with prop and method",
  '''
  class A
    @$b = 1
    $c: ->
      echo $c
  ''',
  '''
  class A {
    public static $b = 1;

    function $c() { return echo($c); }
  }
  '''

compare "do method name",
  '''
  do $b
  ''',
  '''
  $b();
  '''

compare "do closure",
  '''
  do -> 5
  ''',
  '''
  call_user_func((function() { return 5; }));
  '''

compare "assign local to var",
  '''
  $x = -> 3
  ''',
  '''
  $x = function() { return 3; };
  '''

compare "is",
  '''
  $x is 3
  ''',
  '''
  $x === 3;
  '''

compare "isnt",
  '''
  $x isnt 3
  ''',
  '''
  $x !== 3;
  '''

compare "==",
  '''
  $x == 3
  ''',
  '''
  $x == 3;
  '''

compare "!=",
  '''
  $x != 3
  ''',
  '''
  $x != 3;
  '''

compare "$arr[] = ...",
  '''
  $x[] = 5;
  ''',
  '''
  $x[] = 5;
  '''

compare "use from nested closure",
  '''
  ->
    -> $x
  ''',
  '''
  (function() use (&$x) { return function() use (&$x) { return $x; }; });
  '''

compare "use from nested closure don't use nested param",
  '''
  ->
    ( $y ) -> $x + $y
  ''',
  '''
  (function() use (&$x) { return function($y) use (&$x) { return $x + $y; }; });
  '''


