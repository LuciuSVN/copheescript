#!/usr/bin/env ruby

# require 'open3'

GLOBAL_COFFEE = `which coffee`
TEST_COPHEE = 'bin/coffee'

def normalized s
  " #{ s } ".gsub /\s+/, ' '
end

def compare msg, input, expected_output
  # test_output = system TEST_COPHEE, '-p', '-b',
  # stdin, stdout, stderr = Open3.popen3 TEST_COPHEE, '-b', '-p', '-s'
  # stdin.puts input
  # test_output = stdout.gets
  tempfile_name = './tmp_input'
  File.open( tempfile_name, 'w' ) {|file| file.write( input )}
  test_output = `#{ TEST_COPHEE } -b -p -s < #{ tempfile_name }`
  unless normalized( test_output ) == normalized( expected_output )
    raise [msg, "Expected: #{ expected_output }", "Actual: #{ test_output }"].join "\n"
  end
  print '.'
end

compare "function typed arg",
  '''
  ( Wrap $x ) ->  $x + 5
  ''',
  '''
  (function(Wrap $x) { return $x + 5; });
  '''

compare "string interpolation becomes dot",
  '''
  "#{ a }bc"
  ''',
  '''
  a . "bc";
  '''

compare "arithmetic +",
  '''
  1 + 2
  ''',
  '''
  1 + 2;
  '''

compare "array +",
  '''
  $a + a: 3
  ''',
  """
  $a + [ 'a' => 3 ];
  """

compare "bare @ becomes $this",
  '''
  @
  ''',
  '''
  $this;
  '''

compare "@prop becomes $this->prop",
  '''
  @prop
  ''',
  '''
  $this->prop;
  '''

compare "$obj.prop becomes $obj->prop",
  '''
  $obj.prop
  ''',
  '''
  $obj->prop;
  '''

compare "function no args",
  '''
  -> 5
  ''',
  '''
  (function() { return 5; });
  '''

compare "function args including default",
  '''
  ( $a, $b=2 ) -> $a - $b
  ''',
  '''
  (function($a, $b=2) { return $a - $b; });
  '''

compare "automatic use",
  '''
  -> $a
  ''',
  '''
  (function() use ($a) { return $a; });
  '''

compare "obj literal adds quotes to keys",
  "
  a: 1
  b: 2
  'c': 3
  ",
  "
  ([ 'a' => 1, 'b' => 2, 'c' => 3 ]);
  "

compare "class non-static method",
  '''
  class A
    b: ->
  ''',
  '''
  class A {
    function b() {}
  }
  '''

compare "class static method",
  '''
  class A
    @b: ->
  ''',
  '''
  class A {
    static function b() {}
  }
  '''

compare "pseudo-typed param",
  '''
  ( Wrap_$b ) -> $b
  ''',
  '''
  (function(Wrap $b) { return $b; });
  '''

compare "reference class static prop",
  '''
  Zdb::OneToOne
  ''',
  '''
  Zdb::OneToOne;
  '''

compare "call static method",
  '''
  Dt::first_day_of_month $dt
  ''',
  '''
  Dt::first_day_of_month($dt);
  '''

compare "class extends",
  '''
  class A extends B
  ''',
  '''
  class A extends B {
  }
  '''

compare "existence",
  '''
  $a?
  ''',
  '''
  isset( $a );
  '''

compare "class static, non-static vars",
  '''
  class A
    @$b = 1
    $c = 2
  ''',
  '''
  class A {
    public static $b = 1;

    public $c = 2;
  }
  '''

compare "try with pseudo-typed catch",
  '''
  try
    $a = 1
  catch Exception_$e
    echo $e
  ''',
  '''
  try {
    $a = 1;
  } catch (Exception $e) {
    echo($e);
  }
  '''

compare "catch typed arg",
  '''
  try
    $a = 1
  catch Exception $e
    echo $e
  ''',
  '''
  try {
    $a = 1;
  } catch (Exception $e) {
    echo($e);
  }
  '''
compare "simple foreach loop",
  '''
  for $a of $b
    echo $a
  ''',
  '''
    foreach ($b as $a) {
      echo($a);
    }
  '''

compare "foreach loop including key",
  '''
  for $k, $v of $b
    echo $k
  ''',
  '''
    foreach ($b as $k => $v) {
      echo($k);
    }
  '''

compare "existy or",
  '''
  $b = $a ? 3
  ''',
  '''
  $b = isset( $a ) ? $a : 3;
  '''

compare "existy prop",
  '''
  $c = $a?.b
  ''',
  '''
  $c = isset( $a->b ) ? $a->b : null;
  '''

compare "existy access",
  '''
  $c = $a?["b"]
  ''',
  '''
  $c = isset( $a["b"] ) ? $a["b"] : null;
  '''

compare "existy function call",
  '''
  $c = $a?( $b )
  ''',
  '''
  $c = is_callable( $a ) ? $a($b) : null;
  '''

compare ".= op",
  '''
  $a .= "abc"
  ''',
  '''
  $a .= "abc";
  '''

compare "class with prop and method",
  '''
  class A
    @$b = 1
    $c: ->
      echo $c
  ''',
  '''
  class A {
    public static $b = 1;

    function $c() { return echo($c); }
  }
  '''

compare "do method name",
  '''
  do $b
  ''',
  '''
  $b();
  '''

compare "do closure",
  '''
  do -> 5
  ''',
  '''
  call_user_func((function() { return 5; }));
  '''
