don't apply:
prefer-const
no-const-assign
func-style
eqeqeq
prefer-arrow-callback
arrow-body-style
no-var
one-var
no-void
sort-vars
no-octal (we throw an error on unprefixed octal literal)
no-octal-escape (we throw an error on octal escape sequence)
func-names
no-ternary
init-declarations
import/no-mutable-export (since you can't control whether an exported member is const - might be nice to implement its "possible future behavior" of checking whether it in fact does get reassigned?)
no-label-var
no-extra-label
no-unused-labels
no-labels
no-with
no-fallthrough
no-undef-init
no-undefined
require-await
require-yield
no-dupe-args
getter-return (could be used for Object.defineProperty() calls?)
func-name-matching
no-func-assign
max-statements-per-line
no-mixed-requires
no-redeclare
for-direction
no-shadow-restricted-names
no-case-declarations
no-lone-blocks
curly
wrap-iife
template-tag-spacing
switch-colon-spacing
semi
semi-spacing
semi-style
no-extra-semi
no-unexpected-multiline
no-mixed-spaces-and-tabs
no-nested-ternary
no-implicit-globals (it seems like non-bare compilation covers this)

usable against CS AST:
no-warning-comments
prefer-rest-params
id-length
no-multi-assign
no-continue
no-plusplus (allowForLoopAfterthoughts is meaningless)
no-throw-literal
prefer-spread
no-eval
no-implied-eval
prefer-template
new-cap
no-debugger
no-proto
no-dupe-keys
radix
symbol-description
no-new-symbol
no-useless-rename
no-console
no-bitwise
no-sparse-arrays
no-obj-calls
no-alert
no-new-object
handle-callback-err
no-useless-concat
no-iterator
no-param-reassign
no-new-func
no-useless-constructor
import/no-webpack-loader-syntax
no-duplicate-imports
import/prefer-default-export
no-new
prefer-numeric-literals
no-empty-character-class
no-path-concat
no-restricted-imports
no-restricted-globals
no-empty-pattern
no-invalid-regexp
no-caller
no-new-wrappers
no-script-url
no-extend-native
max-params
prefer-promise-reject-errors
id-blacklist
no-useless-call
no-array-constructor
no-prototype-builtins
no-useless-computed-key
global-require
no-restricted-syntax
no-restricted-properties
no-unsafe-finally
no-sync
no-process-env
no-restricted-modules
sort-imports
max-statements
max-lines
sort-keys
max-nested-callbacks
no-duplicate-case
no-process-exit
no-ex-assign
constructor-super
no-new-require
no-buffer-constructor
no-inline-comments
callback-return
no-use-before-define
no-class-assign
no-dupe-class-members
no-catch-shadow
no-empty
line-comment-position
linebreak-style
no-delete-var
key-spacing
new-parens
eol-last
dot-location
no-multi-str
comma-spacing
no-control-regex
no-global-assign (only ++ applies since we generate declarations on other write references)
no-irregular-whitespace
default-case
max-classes-per-file
import/first
import/no-amd
import/no-nodejs-modules
import/exports-last
import/no-namespace
import/prefer-default-export
import/max-dependencies
import/newline-after-import
import/group-exports
accessor-pairs (wouldn't work for backticked get/set syntax)

partially usable against CS AST:
no-else-return (since we conflate else [nested if] with else if, can't currently just disallow the former)

customized for CS AST:
use-isnan
no-self-compare
no-eq-null (just the error message)
valid-typeof
no-negated-condition
yoda
no-unused-vars
no-undef
dot-notation
no-compare-neg-zero
camelcase (not really customized, just including a bugfix eslint/eslint#10802)
object-shorthand
no-extra-boolean-cast
no-regex-spaces
no-implicit-coercion
no-magic-numbers
no-self-assign
operator-assignment
no-unreachable
no-await-in-loop
class-methods-use-this
no-constant-condition
no-unused-expressions
no-template-curly-in-string
no-unneeded-ternary
no-unmodified-loop-condition
max-depth
vars-on-top
guard-for-in
no-useless-return
prefer-object-spread
arrow-spacing
object-curly-spacing
complexity
max-len
no-invalid-this
lines-between-class-members
max-lines-per-function
space-infix-ops
space-unary-ops
no-this-before-super
no-cond-assign
no-inner-declarations
consistent-this
no-unsafe-negation
prefer-destructuring
spaced-comment
capitalized-comments
no-underscore-dangle
no-useless-escape
no-return-await
import/export (TODO: support for export from via ExportMap/checking other module's exports)
import/no-commonjs
import/no-default-export
import/dynamic-import-chunkname
no-lonely-if
no-loop-func
valid-jsdoc
require-jsdoc
multiline-comment-style
no-div-regex
no-extra-bind

not usable against CS AST:
no-sequences (we use SequenceExpressions eg when you use a block where an expression is expected - if included, this rule should be about use of ; operator I'd think)

usable:
array-callback-return (this is mostly trivially, as we implicitly return something - could presumably support allowImplicit: false checking once code path analysis works)

block-scoped-var (trivially, since we always hoist var declarations)
no-empty-function (however, it doesn't seem currently easy/possible to place a comment inside an empty function body, so not very useful)

not usable against JS AST (could get triggered by generated code):
id-match (we generate vars that may not match the specified name pattern)
no-shadow (do (x) -> construct gets flagged, as does what we generate for classes eg A = class A)
padding-line-between-statements (we generate statements with fake location data)
no-return-assign (except-parens doesn't always work, since the closing paren can get stomped on by the OUTDENT that's assigned the same location data. also, this doesn't distinguish implicit from explicit returns. also, we generate assignments that could get included in implicit/explicit return, eg a[b] ? c)
consistent-return (eg a function ending with an if statement and no else generates an explicit return value inside the if and no corresponding return outside the if)

not sure:
strict (I think we test that our generated JS follows strict mode semantics? how does it relate to sourceType: 'module'?)

stylistic rules:
- operator-linebreak - mostly doesn't apply as leading operators aren't allowed (but when leading logical lands, could control that). could support "none" (don't allow breaking operators)
