- why is y declared outside IIFE function in compilation of x = (y * 2 for y in z)? is that correct/desirable?
- why does y = (x for x in [0..a]) generate ref?
- does x for [0..3] by y double-declare ref?
  - same for 0 for [1..2] double-declaring i
- compilation of ([]) -> is broken
- I think "chaining should work within spilling ternary" is confused about what it's compiling to (.a is chained against a: 3, not id(a: 3))
- do func = (x) -> shouldn't get confused by parens around (func = (x) ->)
- shouldn't this declare var b in the func (that's how it's compiling with Babylon)? obj.bar(-> b = 2).foo(b = 1)

- should localize generation of comment inside catch block?
- should parenthesize closure compiler type cast commented expressions? see eg prettier/src/tests/comments/closure-compiler-type-cast.js
- support dynamic imports? ie import(...)
- should allow computed static method names? eg @[b]: ->
- empty backticks can generate invalid JS eg foo = ``
- be able to use "own" for a check? eg a of own b? generates Object.prototype.hasOwnProperty.call(b, a)
- whitespace (eg tests from no-irregular-whitespace) at end of file-ending line comment seems to get lost
- arrow functions don't have arguments, so shouldn't generate arrow function that references arguments?
- should tagged template literal be able to have string/template literal as its tag?
- should allow closing /> to be "indented"?
- allow : in JSX tag names?
- shouldn't JSX be allowed as default param values?
