// Generated by CoffeeScript 2.3.1
(function() {
  var CodeFragment, TAB, asStatement, dump, makeCode, merge, print, printStatementSequence, printer;

  ({merge, dump} = require('./helpers'));

  //### CodeFragment

  // The various nodes defined below all compile to a collection of **CodeFragment** objects.
  // A CodeFragments is a block of generated code, and the location in the source file where the code
  // came from. CodeFragments can be assembled together into working code just by catting together
  // all the CodeFragments' `code` snippets, in order.
  exports.CodeFragment = CodeFragment = class CodeFragment {
    constructor(parent, code) {
      var ref;
      this.code = `${code}`;
      this.type = (parent != null ? (ref = parent.constructor) != null ? ref.name : void 0 : void 0) || 'unknown';
      this.locationData = parent != null ? parent.locationData : void 0;
      this.comments = parent != null ? parent.comments : void 0;
    }

    toString() {
      // This is only intended for debugging.
      return `${this.code}${this.locationData ? ": " + locationDataToString(this.locationData) : ''}`;
    }

  };

  printStatementSequence = function(body, node, o) {
    var fragments, i, index, len, stmt;
    // o = merge o, level: LEVEL_TOP
    // TODO: directives
    fragments = [];
    for (index = i = 0, len = body.length; i < len; index = ++i) {
      stmt = body[index];
      if (index > 0 && o.spaced) {
        fragments.push(node.makeCode('\n'));
      }
      fragments.push(...print(stmt, o));
    }
    return fragments;
  };

  asStatement = function(fragments, node, o) {
    fragments.unshift(node.makeCode(o.indent));
    fragments.push(node.makeCode(';\n'));
    return fragments;
  };

  printer = {
    File: function(o) {
      o.indent = o.bare ? '' : TAB;
      o.spaced = true;
      return print(this.program, o);
    },
    Program: function(o) {
      return printStatementSequence(this.body, this, o);
    },
    VariableDeclaration: function(o) {
      var declaration, fragments, i, index, len, ref;
      fragments = [this.makeCode('var ')];
      ref = this.declarations;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        declaration = ref[index];
        if (index > 0) {
          fragments.push(', ');
        }
        fragments.push(...print(declaration, o));
      }
      return asStatement(fragments, this, o);
    },
    VariableDeclarator: function(o) {
      return print(this.id, o);
    },
    ExpressionStatement: function(o) {
      return asStatement(print(this.expression, o), this, o);
    },
    AssignmentExpression: function(o) {
      var fragments;
      fragments = [];
      fragments.push(...print(this.left, o));
      fragments.push(this.makeCode(` ${this.operator} `));
      fragments.push(...print(this.right, o));
      return fragments;
    },
    Identifier: function(o) {
      return [this.makeCode(this.name)];
    },
    NumericLiteral: function(o) {
      return [this.makeCode(this.extra.raw)];
    }
  };

  makeCode = function(code) {
    return new CodeFragment(this, code);
  };

  exports.print = print = function(node, o) {
    node.makeCode = makeCode;
    if (!printer[node.type]) {
      // node.tab = o.indent
      dump({
        missing: node
      });
    }
    return printer[node.type].call(node, o);
  };

  TAB = '  ';

}).call(this);
